package com.digitaleit.unibackend.entities;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.experimental.FieldDefaults;

@Entity
@Table(name = "users", uniqueConstraints = {
		@UniqueConstraint(columnNames = "username"),
		@UniqueConstraint(columnNames = "email")
})
@FieldDefaults(level=AccessLevel.PRIVATE)
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	Long id;
	
	/*
	 * For admin and moderator, username will be defined. 
	 * for members, msisdn will be used as username
	 */
	
	@NotBlank
	@Size(max = 20)
	String username;
	
	@NotBlank
	@Size(max = 50)
	@Email
	String email;
	
	/*
	 * For members, password autogenerated will be used alongside the msisdn
	 */
	@NotBlank
	@Size(max = 120)
	String password;
	
	@NotBlank
	@Size(max = 50)
	String firstname;

	@NotBlank
	@Size(max = 50)
	String lastname;

	@Size(max = 10)
	String gender;
	
	@Size(max = 20)
	String msisdn;

	@Size(max = 50)
	String adresse;
	
	/*
	 * For members
	 */
	@Size(max = 10)
	String status;
	
	
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable( name = "user_roles", 
		joinColumns = @JoinColumn(name = "user_id"),
		inverseJoinColumns = @JoinColumn(name = "role_id"))
	Set<Role> roles = new HashSet<>();
	
	@ManyToOne
	@JoinTable(name = "partner_member", 
	joinColumns = @JoinColumn(name = "user_id"),
	inverseJoinColumns = @JoinColumn(name = "partner_id"))
	Partner partner;
	
}
